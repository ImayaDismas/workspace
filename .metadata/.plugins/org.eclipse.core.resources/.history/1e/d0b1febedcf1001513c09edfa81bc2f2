package sprite;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

public class CGMoveASprite extends JFrame{
	
	// Name-constants for the various dimensions
	   public static final int CANVAS_WIDTH = 1600;
	   public static final int CANVAS_HEIGHT = 560;
	   public static final Color CANVAS_BG_COLOR = Color.CYAN;
	 
	   private DrawCanvas canvas; // the custom drawing canvas (extends JPanel)
	   private Sprite sprite;     // the moving object
	 
	   /** Constructor to set up the GUI */
	   public CGMoveASprite() {
	      // Construct a sprite given x, y, width, height, color
	      sprite = new Sprite(10, 10, 20, Color.RED);
	 
	      // Set up a panel for the buttons
	      JPanel btnPanel = new JPanel(new FlowLayout());
	      JButton btnLeft = new JButton("Move Left ");
	      btnPanel.add(btnLeft);
	      btnLeft.addActionListener(new ActionListener() {
	         @Override
	         public void actionPerformed(ActionEvent e) {
	            moveLeft();
	            requestFocus(); // change the focus to JFrame to receive KeyEvent
	         }
	      });
	      JButton btnRight = new JButton("Move Right");
	      btnPanel.add(btnRight);
	      btnRight.addActionListener(new ActionListener() {
	         @Override
	         public void actionPerformed(ActionEvent e) {
	            moveRight();
	            requestFocus(); // change the focus to JFrame to receive KeyEvent
	         }
	      });
	 
	      // Set up the custom drawing canvas (JPanel)
	      canvas = new DrawCanvas();
	      canvas.setPreferredSize(new Dimension(CANVAS_WIDTH, CANVAS_HEIGHT));
	 
	      // Add both panels to this JFrame
	      Container cp = getContentPane();
	      cp.setLayout(new BorderLayout());
	      cp.add(canvas, BorderLayout.CENTER);
	      cp.add(btnPanel, BorderLayout.SOUTH);
	 
	      // "this" JFrame fires KeyEvent
	      addKeyListener(new KeyAdapter() {
	         @Override
	         public void keyPressed(KeyEvent evt) {
	            switch(evt.getKeyCode()) {
	               case KeyEvent.VK_LEFT:  moveLeft();  break;
	               case KeyEvent.VK_RIGHT: moveRight(); break;
	            }
	         }
	      });
	 
	      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	      setTitle("Move a Sprite");
	      pack();            // pack all the components in the JFrame
	      setVisible(true);  // show it
	      requestFocus();    // "this" JFrame requests focus to receive KeyEvent
	   }
	 
	   /** Helper method to move the sprite left */
	   private void moveLeft() {
	      // Save the current dimensions for repaint to erase the sprite
	      int savedX = sprite.x;
	      // update sprite
	      sprite.x -= 10;
	      // Repaint only the affected areas, not the entire JFrame, for efficiency
	      //canvas.repaint(savedX, sprite.y, sprite.radius, sprite.radius); // Clear old area to background
	      canvas.repaint(sprite.x, sprite.y, sprite.radius, sprite.radius); // Paint new location
	   }
	 
	   /** Helper method to move the sprite right */
	   private void moveRight() {
	      // Save the current dimensions for repaint to erase the sprite
	      int savedX = sprite.x;
	      // update sprite
	      sprite.x += 10;
	      // Repaint only the affected areas, not the entire JFrame, for efficiency
	      canvas.repaint(savedX, sprite.y, sprite.radius, sprite.radius); // Clear old area to background
	      //canvas.repaint(sprite.x, sprite.y, sprite.radius, sprite.radius); // Paint at new location
	   }
	 
	   /** DrawCanvas (inner class) is a JPanel used for custom drawing */
	   class DrawCanvas extends JPanel {
	      @Override
	      public void paintComponent(Graphics g) {
	         super.paintComponent(g);
	         setBackground(CANVAS_BG_COLOR);
	         sprite.paint(g);  // the sprite paints itself
	      }
	   }
	 
	   /** The entry main() method */
	   public static void main(String[] args) {
	      // Run GUI construction on the Event-Dispatching Thread for thread safety
	      SwingUtilities.invokeLater(new Runnable() {
	         @Override
	         public void run() {
	            new CGMoveASprite(); // Let the constructor do the job
	         }
	      });
	   }
	}